{"version":3,"sources":["components/Loader/Loader.tsx","api.ts","components/PersonLink/PersonLink.tsx","components/PersonItem/PersonItem.tsx","pages/PeoplePage.tsx","components/PageNavLink/PageNavLink.tsx","App.tsx","index.tsx"],"names":["Loader","className","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","props","person","classNames","sex","to","slug","name","PersonItem","selectedPerson","born","died","motherName","mother","fatherName","father","PeoplePage","useState","isLoading","setIsLoading","isLoadingError","setIsLoadingError","people","setPeople","useParams","personSlug","useEffect","peopleArray","map","personCopy","find","getMother","getFather","catch","finally","length","PageNavLink","text","isActive","App","role","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"qQAEaA,EAAS,kBACpB,qBAAKC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,ECOf,SAASC,IAEd,OANYC,EAMA,IALL,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,KAMvBI,MAAK,kBAAMC,MATA,oEASN,IACLD,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,IARlB,IAAcP,CASb,CCLM,IAAMQ,EAAwB,SAACC,GACpC,IAAQC,EAAWD,EAAXC,OAER,OACE,cAAC,IAAD,CACEZ,UAAWa,IAAW,CAAE,kBAAkC,MAAfD,EAAOE,MAClDC,GAAE,kBAAaH,EAAOI,MAFxB,SAIGJ,EAAOK,MAGb,ECVYC,EAAwB,SAACP,GACpC,IAAQC,EAA2BD,EAA3BC,OAAQO,EAAmBR,EAAnBQ,eA8BhB,OACE,qBACE,UAAQ,SACRnB,UAAWa,IAAW,CACpB,yBAA0BM,IAAmBP,EAAOI,OAHxD,UAME,6BACE,cAAC,EAAD,CAAYJ,OAAQA,MAGtB,6BAAKA,EAAOE,MACZ,6BAAKF,EAAOQ,OACZ,6BAAKR,EAAOS,OACZ,6BAzCET,EAAOU,WACLV,EAAOW,OAEP,cAAC,EAAD,CAAYX,OAAQA,EAAOW,SAIxBX,EAAOU,WAGT,MAgCL,6BA5BEV,EAAOY,WACLZ,EAAOa,OAEP,cAAC,EAAD,CAAYb,OAAQA,EAAOa,SAIxBb,EAAOY,WAGT,QAqBV,EC3CYE,EAAa,WACxB,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAIA,EAA4BJ,mBAAmB,IAA/C,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA4BC,cAApBC,kBAAR,MAAqB,GAArB,EAwBA,OAtBAC,qBAAU,WACRP,GAAa,GAEb5B,IACGK,MAAK,SAAA+B,GAAW,OAAIA,EAAYC,KAAI,SAAA1B,GACnC,IAAM2B,EAAU,eAAQ3B,GAUxB,OARIA,EAAOU,aACTiB,EAAWhB,OAzBH,SAACS,EAAkBV,GACnC,OAAOU,EAAOQ,MAAK,SAAA5B,GAAM,OAAIA,EAAOK,OAASK,CAApB,KAAmC,IAC7D,CAuB6BmB,CAAUJ,EAAazB,EAAOU,aAGhDV,EAAOY,aACTe,EAAWd,OAzBH,SAACO,EAAkBR,GACnC,OAAOQ,EAAOQ,MAAK,SAAA5B,GAAM,OAAIA,EAAOK,OAASO,CAApB,KAAmC,IAC7D,CAuB6BkB,CAAUL,EAAazB,EAAOY,aAG7Ce,CACR,GAZgB,IAahBjC,KAAK2B,GACLU,OAAM,kBAAMZ,GAAkB,EAAxB,IACNa,SAAQ,kBAAMf,GAAa,EAAnB,GACZ,GAAE,IAGD,qBAAK7B,UAAU,QAAf,SACE,qBAAKA,UAAU,sBAAf,SACG4B,EACC,cAAC,EAAD,IAEA,mCACGE,EACC,mBAAG,UAAQ,qBAAqB9B,UAAU,kBAA1C,kCAIA,mCACGgC,EAAOa,QAAU,EAChB,mBAAG,UAAQ,kBAAX,+CAIA,wBACE,UAAQ,cACR7C,UAAWa,IACT,QACA,aACA,eACA,YACA,gBAPJ,UAUE,gCACE,+BACE,sCACA,qCACA,sCACA,sCACA,wCACA,6CAIJ,gCACGmB,EAAOM,KAAI,SAAA1B,GAAM,OAChB,cAAC,EAAD,CACEA,OAAQA,EACRO,eAAgBgB,GACXvB,EAAOI,KAJE,gBAiBvC,EC/FY8B,EAAyB,SAACnC,GACrC,IAAQI,EAAaJ,EAAbI,GAAIgC,EAASpC,EAAToC,KAEZ,OACE,cAAC,IAAD,CACEhC,GAAIA,EACJf,UAAW,gBAAGgD,EAAH,EAAGA,SAAH,OAAkBnC,IAC3B,cACA,CACE,8BAA+BmC,GAHxB,EAFb,SASGD,GAGN,ECrBYE,EAAM,kBACjB,sBAAK,UAAQ,MAAb,UACE,qBACE,UAAQ,MACRjD,UAAU,iCACVkD,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKlD,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,EAAD,CAAae,GAAG,IAAIgC,KAAK,SACzB,cAAC,EAAD,CAAahC,GAAG,UAAUgC,KAAK,kBAKrC,sBAAM/C,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmD,KAAK,IAAIC,QAAS,oBAAIpD,UAAU,QAAd,yBACzB,cAAC,IAAD,CAAOmD,KAAK,QAAQC,QAAS,cAAC,IAAD,CAAUrC,GAAG,IAAIsC,SAAO,MAErD,eAAC,IAAD,CAAOF,KAAK,SAAZ,UACE,cAAC,IAAD,CACEG,OAAK,EACLF,QACE,qCACE,oBAAIpD,UAAU,QAAd,yBAEA,cAAC,EAAD,SAKN,cAAC,IAAD,CACEmD,KAAK,cACLC,QACE,qCACE,oBAAIpD,UAAU,QAAd,yBAEA,cAAC,EAAD,YAMR,cAAC,IAAD,CAAOmD,KAAK,IAAIC,QAAS,oBAAIpD,UAAU,QAAd,uCA9ChB,ECInBuD,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,IAAD,UACE,cAAC,EAAD,M","file":"static/js/main.f2a3b680.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Link } from 'react-router-dom';\nimport { FC } from 'react';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: FC<Props> = (props) => {\n  const { person } = props;\n\n  return (\n    <Link\n      className={classNames({ 'has-text-danger': person.sex === 'f' })}\n      to={`/people/${person.slug}`}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink/PersonLink';\n\ntype Props = {\n  person: Person,\n  selectedPerson: string,\n};\n\nexport const PersonItem: FC<Props> = (props) => {\n  const { person, selectedPerson } = props;\n\n  const getMotherText = () => {\n    if (person.motherName) {\n      if (person.mother) {\n        return (\n          <PersonLink person={person.mother} />\n        );\n      }\n\n      return person.motherName;\n    }\n\n    return '-';\n  };\n\n  const getFatherText = () => {\n    if (person.fatherName) {\n      if (person.father) {\n        return (\n          <PersonLink person={person.father} />\n        );\n      }\n\n      return person.fatherName;\n    }\n\n    return '-';\n  };\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': selectedPerson === person.slug,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>{getMotherText()}</td>\n      <td>{getFatherText()}</td>\n    </tr>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Loader } from '../components/Loader';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { PersonItem } from '../components/PersonItem/PersonItem';\n\nconst getMother = (people: Person[], motherName: string): Person | null => {\n  return people.find(person => person.name === motherName) || null;\n};\n\nconst getFather = (people: Person[], fatherName: string): Person | null => {\n  return people.find(person => person.name === fatherName) || null;\n};\n\nexport const PeoplePage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  // const [\n  //   selectedPersonSlug,\n  // ] = useState<string | null>(null);\n  const [people, setPeople] = useState<Person[]>([]);\n  const { personSlug = '' } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(peopleArray => peopleArray.map(person => {\n        const personCopy = { ...person };\n\n        if (person.motherName) {\n          personCopy.mother = getMother(peopleArray, person.motherName);\n        }\n\n        if (person.fatherName) {\n          personCopy.father = getFather(peopleArray, person.fatherName);\n        }\n\n        return personCopy;\n      }))\n      .then(setPeople)\n      .catch(() => setIsLoadingError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"block\">\n      <div className=\"box table-container\">\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <>\n            {isLoadingError ? (\n              <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                Something went wrong\n              </p>\n            ) : (\n              <>\n                {people.length <= 0 ? (\n                  <p data-cy=\"noPeopleMessage\">\n                    There are no people on the server\n                  </p>\n                ) : (\n                  <table\n                    data-cy=\"peopleTable\"\n                    className={classNames(\n                      'table',\n                      'is-striped',\n                      'is-hoverable',\n                      'is-narrow',\n                      'is-fullwidth',\n                    )}\n                  >\n                    <thead>\n                      <tr>\n                        <th>Name</th>\n                        <th>Sex</th>\n                        <th>Born</th>\n                        <th>Died</th>\n                        <th>Mother</th>\n                        <th>Father</th>\n                      </tr>\n                    </thead>\n\n                    <tbody>\n                      {people.map(person => (\n                        <PersonItem\n                          person={person}\n                          selectedPerson={personSlug}\n                          key={person.slug}\n                        />\n                      ))}\n                    </tbody>\n                  </table>\n                )}\n              </>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n  to: string,\n  text: string,\n};\n\nexport const PageNavLink: FC<Props> = (props) => {\n  const { to, text } = props;\n\n  return (\n    <NavLink\n      to={to}\n      className={({ isActive }) => classNames(\n        'navbar-item',\n        {\n          'has-background-grey-lighter': isActive,\n        },\n      )}\n    >\n      {text}\n    </NavLink>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { PageNavLink } from './components/PageNavLink/PageNavLink';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <PageNavLink to=\"/\" text=\"Home\" />\n          <PageNavLink to=\"/people\" text=\"People\" />\n        </div>\n      </div>\n    </nav>\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"people\">\n            <Route\n              index\n              element={(\n                <>\n                  <h1 className=\"title\">People Page</h1>\n\n                  <PeoplePage />\n                </>\n              )}\n            />\n\n            <Route\n              path=\":personSlug\"\n              element={(\n                <>\n                  <h1 className=\"title\">People Page</h1>\n\n                  <PeoplePage />\n                </>\n              )}\n            />\n          </Route>\n\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}